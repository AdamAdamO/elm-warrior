[{"name":"Warrior","comment":" Contains the essential logic for rendering and defining the game. The `Map` and `Player` modules will probably be more interesting.\n\n@docs Model, Msg\n@docs PlayerTurnFunction\n@docs Config, program\n@docs MultiplayerConfig, multiplayerProgram\n\n","unions":[{"name":"Model","comment":" The game model.\n","args":[],"cases":[]},{"name":"Msg","comment":" The game message type.\n","args":[],"cases":[]}],"aliases":[{"name":"Config","comment":" How would you like the game to be played? Which maps would you like to see the player try on, and how many milliseconds should we wait before showing the next turn?\n","args":[],"type":"{ maps : List.List Warrior.Map.Builder.Builder, player : Warrior.PlayerTurnFunction, msPerTurn : Basics.Float }"},{"name":"MultiplayerConfig","comment":" Use this config to play with multiple warriors, and with a custom win condition.\n","args":[],"type":"{ maps : List.List Warrior.Map.Builder.Builder, players : List.List ( String.String, Warrior.PlayerTurnFunction ), msPerTurn : Basics.Float, progressionFunction : Warrior.Map.Progression.ProgressionFunction }"},{"name":"PlayerTurnFunction","comment":" The type signature of an AI turn function\n","args":[],"type":"Warrior.Player.Player -> Warrior.Internal.Map.Map -> Warrior.Internal.History.History -> Warrior.Player.Action"}],"values":[{"name":"multiplayerProgram","comment":" Start a program based of the multiplayer config\n","type":"Warrior.MultiplayerConfig -> Platform.Program () Warrior.Model Warrior.Msg"},{"name":"program","comment":" Use this in your main function to start the game.\n","type":"Warrior.Config -> Platform.Program () Warrior.Model Warrior.Msg"}],"binops":[]},{"name":"Warrior.Coordinate","comment":" Coordinates are simple records that describes a position on a map\n\n@docs Coordinate\n\n@docs toString\n\n","unions":[],"aliases":[{"name":"Coordinate","comment":" A Coordinate is the intersection of column x and row y.\n","args":[],"type":"{ x : Basics.Int, y : Basics.Int }"}],"values":[{"name":"toString","comment":" A human readable string of the given coordinate.\n","type":"Warrior.Coordinate.Coordinate -> String.String"}],"binops":[]},{"name":"Warrior.Direction","comment":" Directions are usually used to specify where an action is applied.\n\n@docs Direction\n@docs all, toString\n\n","unions":[{"name":"Direction","comment":" The different directions a player can move, look and attack. Note that there are no diagonal directions.\n","args":[],"cases":[["Left",[]],["Right",[]],["Up",[]],["Down",[]]]}],"aliases":[],"values":[{"name":"all","comment":" A simple list containing all Direction values. Handy when combined with `List.filter` or `List.map`\n","type":"List.List Warrior.Direction.Direction"},{"name":"toString","comment":" Turns direction value into a human readable string\n","type":"Warrior.Direction.Direction -> String.String"}],"binops":[]},{"name":"Warrior.History","comment":" Every warrior's turn is recorded into History. You can use this module to answer questions about the past.\n\n@docs History\n\n@docs roundsPlayed, previousStates, previousActions\n\n","unions":[],"aliases":[{"name":"History","comment":" The History record. It contains all past actions, and the previous states of warriors and the map\n","args":[],"type":"Warrior.Internal.History.History"}],"values":[{"name":"previousActions","comment":" Returns a list of every action this warrior has ever taken. The first element will be the last action taken.\n","type":"Warrior.Player.Player -> Warrior.History.History -> List.List Warrior.Player.Action"},{"name":"previousStates","comment":" Returns a list of the state of a warrior and the map, going back to the first turn. The first element in the list will represent the state of the warrior and the map at the beginning of that warriors last turn.\n","type":"Warrior.Player.Player -> Warrior.History.History -> List.List ( Warrior.Player.Player, Warrior.Map.Map )"},{"name":"roundsPlayed","comment":" How many complete rounds have been played? A round is over when every warrior has taken an action.\n","type":"Warrior.History.History -> Basics.Int"}],"binops":[]},{"name":"Warrior.Item","comment":" A warrior might find and use different items on their quest.\n\n@docs Item\n@docs toString\n\n","unions":[{"name":"Item","comment":" The different items that can be encountered and used during the game.\n","args":[],"cases":[["Sword",[]],["Potion",[]]]}],"aliases":[],"values":[{"name":"toString","comment":" Human readable name of item\n","type":"Warrior.Item.Item -> String.String"}],"binops":[]},{"name":"Warrior.Map","comment":" The functions in this module allows you to create your own maps, or simply ask questions about the map currently being played.\n\n@docs Map\n\n\n# Search\n\n@docs look, lookDown\n\n","unions":[],"aliases":[{"name":"Map","comment":" A map, or level.\n","args":[],"type":"Warrior.Internal.Map.Map"}],"values":[{"name":"look","comment":" Provides a list of everything the player can see in a specific direction. The first item of the list will be the one tile away from the player. The second item will be two tiles away, etc.\n","type":"Warrior.Direction.Direction -> Warrior.Player.Player -> Warrior.Map.Map -> List.List ( Warrior.Coordinate.Coordinate, Warrior.Tile.Tile )"},{"name":"lookDown","comment":" Describe what is at the players feet. Useful for deciding if there's an item worth picking up.\n","type":"Warrior.Player.Player -> Warrior.Map.Map -> Warrior.Tile.Tile"}],"binops":[]},{"name":"Warrior.Map.Builder","comment":" You can use this module to build your own maps!\n\n@docs Builder\n\n\n# Map layout\n\n@docs Size, init, withDescription, withSpawnPoint, withExitPoint, withWalledArea\n\n\n# Non-playable characters (Npc's) and Items\n\n@docs withNpc, armLastNpc, withItem\n\n\n# Queries\n\n@docs spawnPoints, npcs\n\n\n# Finally\n\n@docs build\n\n","unions":[{"name":"Builder","comment":" A map, or level.\n","args":[],"cases":[]}],"aliases":[{"name":"Size","comment":" Describes how large a map should be in rows and columns. Use this when creating your own maps.\n","args":[],"type":"{ rows : Basics.Int, columns : Basics.Int }"}],"values":[{"name":"armLastNpc","comment":" Places an item into the inventory of the last villain added with the `withNPC` function.\n","type":"Warrior.Item.Item -> Warrior.Map.Builder.Builder -> Warrior.Map.Builder.Builder"},{"name":"build","comment":" Turn this builder into a proper map\n","type":"Warrior.Map.Builder.Builder -> Warrior.Internal.Map.Map"},{"name":"init","comment":" Initialize an empty map of a given size where every tile is empty. Use the the following `with` functions to make the map more interesting.\n","type":"Warrior.Map.Builder.Size -> Warrior.Map.Builder.Builder"},{"name":"npcs","comment":" Return a list of all non-playable characters as well as those characters turn functions.\n","type":"Warrior.Map.Builder.Builder -> List.List ( Warrior.Player.Player, Warrior.Player.Player -> Warrior.Internal.Map.Map -> Warrior.History.History -> Warrior.Player.Action )"},{"name":"spawnPoints","comment":" A list of all points where players can spawn.\n","type":"Warrior.Map.Builder.Builder -> List.List Warrior.Coordinate.Coordinate"},{"name":"withDescription","comment":" Sets a description for the map which, by default, will be displayed above the map when the game is played.\n","type":"String.String -> Warrior.Map.Builder.Builder -> Warrior.Map.Builder.Builder"},{"name":"withExitPoint","comment":" Marks a coordinate on the map where the player needs to go to advance to the next map.\n","type":"Warrior.Coordinate.Coordinate -> Warrior.Map.Builder.Builder -> Warrior.Map.Builder.Builder"},{"name":"withItem","comment":" Places an item on the map which can be picked up by players.\n","type":"Warrior.Coordinate.Coordinate -> Warrior.Item.Item -> Warrior.Map.Builder.Builder -> Warrior.Map.Builder.Builder"},{"name":"withNpc","comment":" Places a villain on the specific coordinate of the map, using the supplied function to know what to do each turn. You can find pre-made turn functions in the `Warrior.Npc` module.\n","type":"String.String -> Warrior.Coordinate.Coordinate -> (Warrior.Player.Player -> Warrior.Internal.Map.Map -> Warrior.History.History -> Warrior.Player.Action) -> Warrior.Map.Builder.Builder -> Warrior.Map.Builder.Builder"},{"name":"withSpawnPoint","comment":" Marks a coordinate on the map where the player will spawn.\n","type":"Warrior.Coordinate.Coordinate -> Warrior.Map.Builder.Builder -> Warrior.Map.Builder.Builder"},{"name":"withWalledArea","comment":" Turns every tile between two coordinates into walls.\n","type":"Warrior.Coordinate.Coordinate -> Warrior.Coordinate.Coordinate -> Warrior.Map.Builder.Builder -> Warrior.Map.Builder.Builder"}],"binops":[]},{"name":"Warrior.Map.Progression","comment":" In this module you will find functions that define when a map has been won and lost. You can also define your own progression functions if you want to customize the game a bit.\n\n@docs Progression, ProgressionFunction\n\n\n# Pre-made progression functions\n\n@docs reachExitPoint, reachExitPointWithRoundLimit\n\n","unions":[{"name":"Progression","comment":" There are three ways the course of the game can progress. We can _advance_ certain players to the next map. If there are no maps left, the advanced players are deemed the winners. The game can be lost, also known as _game over_, and the map can still be _undecided_.\n","args":[],"cases":[["Advance",["List.List Warrior.Internal.Player.Player"]],["GameOver",[]],["Undecided",[]]]}],"aliases":[{"name":"ProgressionFunction","comment":" A function which receives information about the current map played, and decides what the game engine should do next. The function will be called at the end of every turn.\n","args":[],"type":"List.List Warrior.Internal.Player.Player -> Warrior.Map.Map -> Warrior.History.History -> Warrior.Map.Progression.Progression"}],"values":[{"name":"reachExitPoint","comment":" A progression function which advances all players when one has reached an exit point. The game is lost if all players are dead.\n","type":"List.List Warrior.Internal.Player.Player -> Warrior.Map.Map -> Warrior.History.History -> Warrior.Map.Progression.Progression"},{"name":"reachExitPointWithRoundLimit","comment":" Like reachExitPoint, but also ends the game if a certain number of rounds have been played.\n","type":"Basics.Int -> List.List Warrior.Internal.Player.Player -> Warrior.Map.Map -> Warrior.History.History -> Warrior.Map.Progression.Progression"}],"binops":[]},{"name":"Warrior.Maps","comment":" A selection of pre-made maps to test your hero.\n\n@docs all, movement, fighting\n\n\n# Movement only\n\n@docs straight, inverseL, loop, withDeadEndLeft, withDeadEndRight, openSpace, openSpaceReverse\n\n\n# Fighing only\n\n@docs straightGuard, straightPowerfulGuard, straightGuardPickupSword, straightGuardPickupPotion, dungeon\n\n","unions":[],"aliases":[],"values":[{"name":"all","comment":" A list of all pre-made maps.\n","type":"List.List Warrior.Map.Map"},{"name":"dungeon","comment":" ","type":"Warrior.Map.Map"},{"name":"fighting","comment":" A list of maps which require fighting in addition to navigation.\n","type":"List.List Warrior.Map.Map"},{"name":"inverseL","comment":" ","type":"Warrior.Map.Map"},{"name":"loop","comment":" ","type":"Warrior.Map.Map"},{"name":"movement","comment":" A list of map that only require navigation.\n","type":"List.List Warrior.Map.Map"},{"name":"openSpace","comment":" ","type":"Warrior.Map.Map"},{"name":"openSpaceReverse","comment":" ","type":"Warrior.Map.Map"},{"name":"straight","comment":" ","type":"Warrior.Map.Map"},{"name":"straightGuard","comment":" ","type":"Warrior.Map.Map"},{"name":"straightGuardPickupPotion","comment":" ","type":"Warrior.Map.Map"},{"name":"straightGuardPickupSword","comment":" ","type":"Warrior.Map.Map"},{"name":"straightPowerfulGuard","comment":" ","type":"Warrior.Map.Map"},{"name":"withDeadEndLeft","comment":" ","type":"Warrior.Map.Map"},{"name":"withDeadEndRight","comment":" ","type":"Warrior.Map.Map"}],"binops":[]},{"name":"Warrior.Npc.Dummy","comment":" A dummy. A villain which just stands still no matter what happens.\n\n@docs takeTurn\n\n","unions":[],"aliases":[],"values":[{"name":"takeTurn","comment":" Use this function with the `withNPC` function of the `Map` module to add dangerous opponents to a map.\n","type":"Warrior.Player.Player -> Warrior.Map.Map -> Warrior.History.History -> Warrior.Player.Action"}],"binops":[]},{"name":"Warrior.Npc.StationaryAttacker","comment":" AI of a villain which attacks anything that gets close.\n\n@docs takeTurn\n\n","unions":[],"aliases":[],"values":[{"name":"takeTurn","comment":" Use this function with the `withNPC` function of the `Map` module to add dangerous opponents to a map.\n","type":"Warrior.Player.Player -> Warrior.Map.Map -> Warrior.History.History -> Warrior.Player.Action"}],"binops":[]},{"name":"Warrior.Player","comment":" The player record contains all known state for playable, as well as non-playable characters in the game. You'll probably need the functions in this module to make decisions about your next turn.\n\n@docs Player, Action\n\n@docs id, position, health, attackDamage, healingPotential, inventory, maxHealth\n\n","unions":[{"name":"Action","comment":" The different actions which can be performed on a given turn.\n","args":[],"cases":[["Wait",[]],["Heal",[]],["Pickup",[]],["Move",["Warrior.Direction.Direction"]],["Attack",["Warrior.Direction.Direction"]]]}],"aliases":[{"name":"Player","comment":" This record contains the state of a given player. Playable or non-playable.\n","args":[],"type":"Warrior.Internal.Player.Player"}],"values":[{"name":"attackDamage","comment":" Returns how much damage this player will do as the result of an attack. This takes the items in the players inventory into account.\n","type":"Warrior.Player.Player -> Basics.Int"},{"name":"healingPotential","comment":" Returns how many points this player will recover as the result of a heal action. Items in the players inventory will be taken into account.\n","type":"Warrior.Player.Player -> Basics.Int"},{"name":"health","comment":" Get the health of a player.\n","type":"Warrior.Player.Player -> Basics.Int"},{"name":"id","comment":" The id of the player\n","type":"Warrior.Player.Player -> String.String"},{"name":"inventory","comment":" Get all the items that the player has in their posession.\n","type":"Warrior.Player.Player -> List.List Warrior.Item.Item"},{"name":"maxHealth","comment":" Get the maximum health the player can have. The player usually starts with this amount of health at the start of a map.\n","type":"Warrior.Player.Player -> Basics.Int"},{"name":"position","comment":" Retrieve the current position of a player.\n","type":"Warrior.Player.Player -> Warrior.Coordinate.Coordinate"}],"binops":[]},{"name":"Warrior.Tile","comment":" A map is built of several tiles. You can use this module to get a better idea of how the map is made up.\n\n@docs Tile\n\n\n# Predicates\n\nSometimes a pattern match is a bit much when all you want is the answer to a simple question. So here are simple predicate functions that make it easy to answer the most basic question about a tile.\n\n@docs isWall, isEmpty, isSpawnPoint, isExit, isPlayer, isItem, canMoveOnto\n\n","unions":[{"name":"Tile","comment":" Describes what is on a specific coordinate of a map.\n","args":[],"cases":[["Wall",[]],["Empty",[]],["SpawnPoint",[]],["Exit",[]],["Player",["String.String"]],["Item",["Warrior.Item.Item"]]]}],"aliases":[],"values":[{"name":"canMoveOnto","comment":" True if a warrior can move to this tile with a move action.\n","type":"Warrior.Tile.Tile -> Basics.Bool"},{"name":"isEmpty","comment":" True if the given Tile represents Empty space\n","type":"Warrior.Tile.Tile -> Basics.Bool"},{"name":"isExit","comment":" True if the given Tile is an exit point\n","type":"Warrior.Tile.Tile -> Basics.Bool"},{"name":"isItem","comment":" True if the given Tile represents an item\n","type":"Warrior.Tile.Tile -> Basics.Bool"},{"name":"isPlayer","comment":" True if the given Tile represents a player\n","type":"Warrior.Tile.Tile -> Basics.Bool"},{"name":"isSpawnPoint","comment":" True if the given Tile is a spawn point\n","type":"Warrior.Tile.Tile -> Basics.Bool"},{"name":"isWall","comment":" True if the given Tile is a Wall\n","type":"Warrior.Tile.Tile -> Basics.Bool"}],"binops":[]}]